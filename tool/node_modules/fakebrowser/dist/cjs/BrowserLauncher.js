"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserLauncher = void 0;
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
const URLToolkit = __importStar(require("url-toolkit"));
const http = __importStar(require("http"));
const url = __importStar(require("url"));
const axios_1 = __importDefault(require("axios"));
const https_1 = require("https");
const assert_1 = require("assert");
const Driver_js_1 = __importDefault(require("./Driver.js"));
const DeviceDescriptor_js_1 = __importDefault(require("./DeviceDescriptor.js"));
const PptrPatcher_1 = require("./PptrPatcher");
const FakeBrowser_1 = require("./FakeBrowser");
const kFakeDDFileName = '__fakebrowser_fakeDD.json';
const kInternalHttpServerHeartbeatMagic = '__fakebrowser__&88ff22--';
class BrowserLauncher {
    static checkLaunchOptionsLegal(options) {
        if (!options || !options.args || !options.args.length) {
            return;
        }
        // These args are set by FakeBrowser and cannot be set externally:
        const externalCannotSetArgs = [
            '--user-data-dir',
            '--lang',
            '--window-position',
            '--window-size',
        ];
        if (options.args.filter(e => externalCannotSetArgs.includes(e.toLocaleLowerCase().split('=')[0])).length > 0) {
            throw new TypeError(`${externalCannotSetArgs} cannot be set in options.args`);
        }
    }
    static prepareFakeDeviceDesc(params) {
        // Go to the userDataDir specified by the user and read the __fakebrowser_fakeDD.json file
        // or create it if it does not exist.
        const userDataDir = params.userDataDir;
        (0, assert_1.strict)(userDataDir);
        if (!fs.existsSync(userDataDir)) {
            // may throw
            fs.mkdirSync(userDataDir, { recursive: true });
        }
        // Read from existing files, or generate if not available.
        const fakeDDPathName = path.resolve(userDataDir, `./${kFakeDDFileName}`);
        let tempFakeDD = null;
        try {
            tempFakeDD = (fs.existsSync(fakeDDPathName)
                ? fs.readJsonSync(fakeDDPathName)
                : params.deviceDesc);
            DeviceDescriptor_js_1.default.checkLegal(tempFakeDD);
        }
        catch (ex) {
            console.warn('FakeDD illegal');
            // It is possible that some fields are missing due to the deviceDesc update and need to recreate fakeDD
            const orgTempFakeDD = tempFakeDD;
            tempFakeDD = params.deviceDesc;
            if (orgTempFakeDD) {
                tempFakeDD.fontSalt = orgTempFakeDD.fontSalt;
                tempFakeDD.canvasSalt = orgTempFakeDD.canvasSalt;
            }
        }
        const { fakeDeviceDesc, needsUpdate, } = DeviceDescriptor_js_1.default.buildFakeDeviceDescriptor(tempFakeDD);
        if (needsUpdate) {
            fs.writeJsonSync(fakeDDPathName, fakeDeviceDesc, { spaces: 2 });
        }
        params.fakeDeviceDesc = fakeDeviceDesc;
    }
    static async connect(params) {
        await this.bootInternalHTTPServer();
        this.prepareFakeDeviceDesc(params);
        (0, assert_1.strict)(params.fakeDeviceDesc);
        const uuid = DeviceDescriptor_js_1.default.deviceUUID(params.fakeDeviceDesc);
        const { vanillaBrowser, pptrExtra, } = await Driver_js_1.default.connect(uuid, params);
        const launchTime = new Date().getTime();
        const fb = new FakeBrowser_1.FakeBrowser(params, vanillaBrowser, pptrExtra, launchTime, uuid);
        // pages 0 cannot be hook, lets drop it
        await fb._patchPages0Bug();
        return fb;
    }
    static async launch(params) {
        this.bootBrowserSurvivalChecker();
        await this.bootInternalHTTPServer();
        // deviceDesc, userDataDir cannot be empty
        this.checkLaunchOptionsLegal(params.launchOptions);
        this.prepareFakeDeviceDesc(params);
        (0, assert_1.strict)(params.fakeDeviceDesc);
        const uuid = DeviceDescriptor_js_1.default.deviceUUID(params.fakeDeviceDesc);
        const { vanillaBrowser, pptrExtra, } = await Driver_js_1.default.launch(uuid, FakeBrowser_1.FakeBrowser.globalConfig.defaultLaunchArgs, params);
        const launchTime = new Date().getTime();
        const fb = new FakeBrowser_1.FakeBrowser(params, vanillaBrowser, pptrExtra, launchTime, uuid);
        // pages 0 cannot be hook, lets drop it
        await fb._patchPages0Bug();
        // Manage surviving browsers and kill them if they time out
        this._fakeBrowserInstances.push(fb);
        return fb;
    }
    static async bootInternalHTTPServer() {
        if (!this._httpServer) {
            this._httpServer = http.createServer();
            this._httpServer.on('request', async (req, res) => {
                (0, assert_1.strict)(req.url);
                const { query, pathname } = url.parse(req.url, true);
                if (pathname === '/hb') {
                    res.write(kInternalHttpServerHeartbeatMagic);
                    res.end();
                }
                if (pathname === '/patchWorker') {
                    const relUrl = query['relUrl'];
                    const workerUrl = query['workerUrl'];
                    const uuid = query['uuid'];
                    const fullUrl = URLToolkit.buildAbsoluteURL(relUrl, workerUrl);
                    console.log('request worker content from: ', fullUrl);
                    // Object.fromEntries ES2019
                    const reqHeaders = Object.fromEntries(Object.entries(req.headers).map(e => ([e[0], e[1][0]])));
                    delete reqHeaders['host'];
                    // TODO: get through proxy
                    const jsResp = await axios_1.default.get(fullUrl, {
                        headers: reqHeaders,
                        httpsAgent: new https_1.Agent({
                            rejectUnauthorized: false,
                        }),
                    });
                    let jsContent = jsResp.data;
                    const browser = BrowserLauncher.getBrowserWithUUID(uuid);
                    if (browser) {
                        jsContent = await PptrPatcher_1.PptrPatcher.patchWorkerJsContent(browser, jsContent);
                    }
                    const respHeaders = jsResp.headers;
                    delete respHeaders['content-length'];
                    res.writeHead(jsResp.status, jsResp.statusText, respHeaders);
                    res.write(jsContent);
                    res.end();
                }
            });
            // If the port listens to errors, determine if the heartbeat interface is successful
            try {
                this._httpServer.listen(FakeBrowser_1.FakeBrowser.globalConfig.internalHttpServerPort);
            }
            catch (ex) {
                const hbUrl = `http://127.0.0.1:${FakeBrowser_1.FakeBrowser.globalConfig.internalHttpServerPort}/hb`;
                try {
                    const hbData = (await axios_1.default.get(hbUrl)).data;
                    if (hbData === kInternalHttpServerHeartbeatMagic) {
                        try {
                            this._httpServer.close();
                        }
                        finally {
                            this._httpServer = null;
                        }
                        return;
                    }
                }
                catch (ignore) {
                }
                throw ex;
            }
        }
    }
    static bootBrowserSurvivalChecker() {
        if (!this._checkerIntervalId) {
            this._checkerIntervalId = setInterval(async () => {
                const killThese = this._fakeBrowserInstances.filter(e => (e.launchParams.maxSurvivalTime > 0)
                    && (new Date().getTime() > e.bindingTime + e.launchParams.maxSurvivalTime));
                const p = [];
                for (const fb of killThese) {
                    p.push(fb.shutdown());
                }
                await Promise.all(p);
            }, 5 * 1000);
        }
    }
    static getBrowserWithUUID(uuid) {
        return this._fakeBrowserInstances.find(e => e.uuid === uuid);
    }
    static async _forceShutdown(fb) {
        await Driver_js_1.default.shutdown(fb.vanillaBrowser);
        const browserIndex = this._fakeBrowserInstances.indexOf(fb);
        (0, assert_1.strict)(browserIndex >= 0);
        this._fakeBrowserInstances.splice(browserIndex, 1);
        // If all browsers have exited, close internal http service
        if (this._fakeBrowserInstances.length === 0) {
            // console.log('close appserver')
            if (this._httpServer) {
                try {
                    this._httpServer.close();
                }
                finally {
                    this._httpServer = null;
                }
            }
        }
    }
}
exports.BrowserLauncher = BrowserLauncher;
BrowserLauncher._fakeBrowserInstances = [];
BrowserLauncher._checkerIntervalId = null;
BrowserLauncher._httpServer = null;
//# sourceMappingURL=data:application/json;base64,