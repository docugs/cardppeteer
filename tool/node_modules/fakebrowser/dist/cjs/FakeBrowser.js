"use strict";
// noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeBrowser = exports.kDefaultLaunchArgs = exports.kDefaultWindowsDD = void 0;
const path = __importStar(require("path"));
const assert_1 = require("assert");
const UserAgentHelper_1 = require("./UserAgentHelper");
const PptrToolkit_1 = require("./PptrToolkit");
const PptrPatcher_1 = require("./PptrPatcher");
const FakeUserAction_1 = require("./FakeUserAction");
const BrowserLauncher_1 = require("./BrowserLauncher");
const BrowserBuilder_1 = require("./BrowserBuilder");
const TouchScreen_1 = require("./TouchScreen");
exports.kDefaultWindowsDD = require(path.resolve(__dirname, '../../device-hub-demo/Windows.json'));
const kBrowserMaxSurvivalTime = 60 * 1000 * 15;
const kDefaultReferers = ['https://www.google.com', 'https://www.bing.com'];
const kInternalHttpServerPort = 17311;
// chromium startup parameters
// https://peter.sh/experiments/chromium-command-line-switches/
// https://www.scrapehero.com/how-to-increase-web-scraping-speed-using-puppeteer/
// noinspection TypeScriptValidateJSTypes,SpellCheckingInspection
exports.kDefaultLaunchArgs = [
    '--no-sandbox',
    '--no-pings',
    '--no-zygote',
    '--mute-audio',
    '--no-first-run',
    '--no-default-browser-check',
    '--disable-software-rasterizer',
    '--disable-cloud-import',
    '--disable-gesture-typing',
    '--disable-setuid-sandbox',
    '--disable-offer-store-unmasked-wallet-cards',
    '--disable-offer-upload-credit-cards',
    '--disable-print-preview',
    '--disable-voice-input',
    '--disable-wake-on-wifi',
    '--disable-cookie-encryption',
    '--ignore-gpu-blocklist',
    '--enable-async-dns',
    '--enable-simple-cache-backend',
    '--enable-tcp-fast-open',
    '--enable-webgl',
    '--prerender-from-omnibox=disabled',
    '--enable-web-bluetooth',
    '--ignore-certificate-errors',
    '--ignore-certificate-errors-spki-list',
    '--disable-site-isolation-trials',
    '--disable-features=AudioServiceOutOfProcess,IsolateOrigins,site-per-process,TranslateUI,BlinkGenPropertyTrees',
    '--aggressive-cache-discard',
    '--disable-extensions',
    '--disable-blink-features',
    '--disable-blink-features=AutomationControlled',
    '--disable-ipc-flooding-protection',
    '--enable-features=NetworkService,NetworkServiceInProcess,TrustTokens,TrustTokensAlwaysAllowIssuance',
    '--disable-component-extensions-with-background-pages',
    '--disable-default-apps',
    '--disable-breakpad',
    '--disable-component-update',
    '--disable-domain-reliability',
    '--disable-sync',
    '--disable-client-side-phishing-detection',
    '--disable-hang-monitor',
    '--disable-popup-blocking',
    '--disable-prompt-on-repost',
    '--metrics-recording-only',
    '--safebrowsing-disable-auto-update',
    '--password-store=basic',
    '--autoplay-policy=no-user-gesture-required',
    '--use-mock-keychain',
    '--force-webrtc-ip-handling-policy=default_public_interface_only',
    '--disable-session-crashed-bubble',
    '--disable-crash-reporter',
    '--disable-dev-shm-usage',
    '--force-color-profile=srgb',
    '--disable-accelerated-2d-canvas',
    '--disable-translate',
    '--disable-background-networking',
    '--disable-background-timer-throttling',
    '--disable-backgrounding-occluded-windows',
    '--disable-infobars',
    '--hide-scrollbars',
    '--disable-renderer-backgrounding',
    '--font-render-hinting=none',
    '--disable-logging',
    '--use-gl=swiftshader',
    // optimze fps
    '--enable-surface-synchronization',
    '--run-all-compositor-stages-before-draw',
    '--disable-threaded-animation',
    '--disable-threaded-scrolling',
    '--disable-checker-imaging',
    '--disable-new-content-rendering-timeout',
    '--disable-image-animation-resync',
    '--disable-partial-raster',
    '--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4',
    // '--deterministic-mode',                          // Some friends commented that with this parameter mouse movement is stuck, so let's comment it out
    // '--disable-web-security',
    // '--disable-cache',                               // cache
    // '--disable-application-cache',
    // '--disable-offline-load-stale-cache',
    // '--disable-gpu-shader-disk-cache',
    // '--media-cache-size=0',
    // '--disk-cache-size=0',
    // '--enable-experimental-web-platform-features',   // Make Chrome for Linux support Bluetooth. eg: navigator.bluetooth, window.BluetoothUUID
    // '--disable-gpu',                                 // Cannot be disabled: otherwise webgl will not work
    // '--disable-speech-api',                          // Cannot be disabled: some websites use speech-api as fingerprint
    // '--no-startup-window',                           // Cannot be enabled: Chrome won't open the window and puppeteer thinks it's not connected
    // '--disable-webgl',                               // Requires webgl fingerprint
    // '--disable-webgl2',
    // '--disable-notifications',                       // Cannot be disabled: notification-api not available, fingerprints will be dirty
];
// if (helper.inLinux()) {
//     kDefaultLaunchArgs.push(...[
//         '--single-process',              // Chrome does not run with single process in windows / macos, but it runs very well in linux (from Anton bro).
//     ])
// }
// Is there a friend class similar to C++ ?
// friend class BrowserLauncher
class FakeBrowser {
    constructor(driverParams, vanillaBrowser, pptrExtra, bindingTime, uuid) {
        this.driverParams = driverParams;
        this.vanillaBrowser = vanillaBrowser;
        this.pptrExtra = pptrExtra;
        this.bindingTime = bindingTime;
        this.uuid = uuid;
        (0, assert_1.strict)(driverParams.deviceDesc
            && driverParams.deviceDesc.navigator
            && driverParams.deviceDesc.navigator.userAgent);
        this.isMobileBrowser = UserAgentHelper_1.UserAgentHelper.isMobile(driverParams.deviceDesc.navigator.userAgent);
        this.uuid = uuid;
        this.userAction = new FakeUserAction_1.FakeUserAction(this);
        this._zombie = false;
        // this._workerUrls = []
        vanillaBrowser.on('disconnected', this.onDisconnected.bind(this));
        if (!driverParams.doNotHook) {
            vanillaBrowser.on('targetcreated', this.onTargetCreated.bind(this));
        }
    }
    // private readonly _workerUrls: string[]
    get launchParams() {
        (0, assert_1.strict)(this.driverParams.launchOptions);
        return this.driverParams;
    }
    get connectParams() {
        (0, assert_1.strict)(this.driverParams.connectOptions);
        return this.driverParams;
    }
    async beforeShutdown() {
    }
    async shutdown() {
        if (!this._zombie) {
            await this.beforeShutdown();
            this._zombie = true;
            await BrowserLauncher_1.BrowserLauncher._forceShutdown(this);
        }
        else {
            // console.warn('This instance has been shutdown and turned into a zombie.')
        }
    }
    async getActivePage() {
        const result = await PptrToolkit_1.PptrToolkit.getActivePage(this.vanillaBrowser);
        return result;
    }
    onDisconnected() {
        return this.shutdown();
    }
    async onTargetCreated(target) {
        // console.log('targetcreated type:', target.type(), target.url())
        const targetType = target.type();
        const worker = await target.worker();
        if (0 && worker) {
            await this.interceptWorker(worker);
        }
        else if (targetType === 'service_worker'
            || targetType === 'other' && (target.url().startsWith('http'))) {
            const cdpSession = await target.createCDPSession();
            await this.interceptTarget(target, cdpSession);
        }
        else if (targetType === 'page') {
            await this.interceptPage((await target.page()));
        }
    }
    async interceptWorker(worker) {
        (0, assert_1.strict)(!!worker);
        const injectJs = await PptrPatcher_1.PptrPatcher.evasionsCode(this);
        await worker.evaluate(injectJs);
    }
    async interceptTarget(target, client) {
        (0, assert_1.strict)(!!client);
        // FIXME: Worker & SharedWorker does not work with this way
        // console.log('intercept', target.url())
        const injectJs = await PptrPatcher_1.PptrPatcher.evasionsCode(this);
        await client.send('Runtime.evaluate', {
            expression: injectJs,
        });
    }
    async interceptPage(page) {
        // console.log('inject page')
        let cdpSession = null;
        const fakeDD = this.driverParams.fakeDeviceDesc;
        (0, assert_1.strict)(fakeDD);
        // if there is an account password that proxy needs to log in
        if (this.driverParams.proxy &&
            this.driverParams.proxy.username &&
            this.driverParams.proxy.password) {
            await page.authenticate({
                username: this.driverParams.proxy.username,
                password: this.driverParams.proxy.password,
            });
        }
        // cdp
        try {
            await page['_client'].send('ServiceWorker.setForceUpdateOnPageLoad', { forceUpdateOnPageLoad: true });
        }
        catch (ex) {
            console.warn('CDP ServiceWorker.setForceUpdateOnPageLoad exception', ex);
        }
        // touch
        if (this.isMobileBrowser) {
            try {
                await page['_client'].send('Emulation.setEmitTouchEventsForMouse', {
                    enabled: true,
                });
            }
            catch (ex) {
                console.warn('CDP Emulation.setEmitTouchEventsForMouse exception', ex);
            }
            Object.defineProperty(page, '_patchTouchscreen', {
                value: new TouchScreen_1.Touchscreen(page['_client'], page.keyboard),
            });
        }
        // intercept worker
        // const target = page.target()
        // cdpSession = await target.createCDPSession()
        // await this.interceptWorker(target, cdpSession);
        //
        // page.on('workercreated', (worker: WebWorker) => {
        //     console.log(`worker created ${worker.url()}`)
        //     this._workerUrls.push(worker.url())
        // })
        //
        // page.on('workerdestroyed', async (worker: WebWorker) => {
        //     console.log(`worker destroyed ${worker.url()}`)
        // })
        // set additional request headers
        // read version from the launched browser
        const ua = await this.vanillaBrowser.userAgent();
        const chromeMajorVersion = UserAgentHelper_1.UserAgentHelper.chromeMajorVersion(ua);
        const os = UserAgentHelper_1.UserAgentHelper.os(fakeDD.navigator.userAgent);
        (0, assert_1.strict)(chromeMajorVersion);
        (0, assert_1.strict)(os);
        const extraHTTPHeaders = {
            // MUST NOT SET ACCEPT-LANGUAGE!!!! : https://github.com/puppeteer/puppeteer/issues/1984
            // 'Accept-Language': UserAgentHelper.buildAcceptLanguage(fakeDD),
            // FIXME: error occurs after the referer is set
            // 'referer': FakeBrowser.globalConfig.defaultReferers[sh.rd(0, referers.length - 1)],
            'sec-ch-ua': UserAgentHelper_1.UserAgentHelper.browserType(ua) === 'Edge'
                ? `"Microsoft Edge";v="${chromeMajorVersion}", "Chromium";v="${chromeMajorVersion}", ";Not A Brand";v="99"`
                : `"Google Chrome";v="${chromeMajorVersion}", "Chromium";v="${chromeMajorVersion}", ";Not A Brand";v="99"`,
            'sec-ch-ua-mobile': '?0',
            // 'sec-fetch-site': 'cross-site',
        };
        if (chromeMajorVersion >= 93) {
            extraHTTPHeaders['sec-ch-ua-platform'] = `"${os}"`;
        }
        await page.setExtraHTTPHeaders(extraHTTPHeaders);
        await page.setUserAgent(fakeDD.navigator.userAgent);
        await page.setViewport({
            width: fakeDD.window.innerWidth,
            height: fakeDD.window.innerHeight,
            isMobile: UserAgentHelper_1.UserAgentHelper.isMobile(fakeDD.navigator.userAgent),
            hasTouch: fakeDD.navigator.maxTouchPoints > 0,
            deviceScaleFactor: fakeDD.window.devicePixelRatio,
        });
        return { page, cdpSession };
    }
    async _patchPages0Bug() {
        // pages[0] keeps failing to hook effectively
        // But I can't close it, because in windows, closing this page will cause the whole browser to close
        // So I can only make it inaccessible to users
        const abandonedPageTargetIds = [];
        const pages = await this.vanillaBrowser.pages();
        if (pages.length > 0) {
            abandonedPageTargetIds.push(...pages.map(e => e.target()['_targetId']));
        }
        const pagesFn = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.vanillaBrowser), 'pages').value.bind(this.vanillaBrowser);
        Object.defineProperty(Object.getPrototypeOf(this.vanillaBrowser), 'pages', {
            value: new Proxy(this.vanillaBrowser.pages, {
                async apply(target, thisArg, args) {
                    let pages = await pagesFn();
                    // Maybe browser is created based on connect, with different instances
                    // so can only compare TargetId
                    pages = pages.filter(e => !abandonedPageTargetIds.includes(e.target()['_targetId']));
                    return pages;
                },
            }),
        });
    }
}
exports.FakeBrowser = FakeBrowser;
FakeBrowser.Builder = BrowserBuilder_1.BrowserBuilder;
FakeBrowser.globalConfig = {
    defaultBrowserMaxSurvivalTime: kBrowserMaxSurvivalTime,
    defaultReferers: kDefaultReferers,
    internalHttpServerPort: kInternalHttpServerPort,
    defaultLaunchArgs: exports.kDefaultLaunchArgs,
};
//# sourceMappingURL=data:application/json;base64,